name: Build and Deploy to EC2

on:
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configuração do JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Rodar o build com Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 4. Copiar o arquivo .jar para EC2 usando SCP
      - name: Copy .jar to EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa target/*.jar ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/app/

      # 5. Parar a aplicação anterior, caso esteja rodando
      - name: Stop previous application
        run: |
          ssh -t -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} <<EOF
            PID=\$(sudo lsof -t -i:8080)
            if [ -n "\$PID" ]; then
              echo "Stopping previous application (PID: \$PID)..."
              sudo kill -9 \$PID
            else
              echo "No application running on port 8080."
            fi
          EOF

      # 6. Rodar a aplicação na EC2 e verificar
      - name: Start application and verify on EC2
        run: |
          set -x  # Modo de depuração
          process_timeout=60  # Tempo máximo para verificar se o processo foi iniciado (1 minuto)
          app_timeout=120  # Tempo máximo de espera para a aplicação responder (2 minutos)
          interval=10  # Intervalo de verificação (10 segundos)

          # Inicia a aplicação em segundo plano
          echo "Starting application on EC2..."
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} \
            'cd /home/ubuntu/app && nohup java -jar *.jar > app.log 2>&1 &' || exit 1

          # Verificar se o processo foi iniciado corretamente
          echo "Verifying if the application is running..."
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))

            if [ $elapsed -ge $process_timeout ]; then
              echo "❌ Timeout reached for process startup (${process_timeout} seconds)."
              exit 1  # Falha caso o timeout seja atingido
            fi

            # Verifica se o processo está rodando
            if ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} \
              'pgrep -f "java -jar *.jar" > /dev/null'; then
              echo "✅ Application process is running on EC2!"
              break  # Processo iniciado corretamente, sai do loop
            fi

            echo "⏳ Process not started yet. Waiting ${interval} seconds..."
            sleep $interval
          done

          # Verificar se a aplicação está funcionando
          echo "Verifying if the application is responding..."
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))

            if [ $elapsed -ge $app_timeout ]; then
              echo "❌ Timeout reached for application response (${app_timeout} seconds)."
              exit 1  # Falha caso o timeout seja atingido
            fi

            # Verifica se a aplicação está respondendo
            if ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} \
              'curl -s http://localhost:8080/api-helpdesk > /dev/null' && echo "true"; then
              echo "✅ Application is responding on EC2!"
              exit 0  # Finaliza o job com sucesso
            fi

            echo "⏳ Application not responding yet. Waiting ${interval} seconds..."
            sleep $interval
          done
